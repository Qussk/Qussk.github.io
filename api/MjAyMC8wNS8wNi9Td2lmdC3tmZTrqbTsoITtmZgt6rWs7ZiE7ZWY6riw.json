{"title":"[Swift]화면전환 구현하기","date":"2020-05-06T16:52:03.000Z","date_formatted":{"ll":"May 6, 2020","L":"05/06/2020","MM-DD":"05-06"},"thumbnail":"/image/Stert.png","link":"2020/05/06/Swift-화면전환-구현하기","tags":["Button","Label","Swift","TextField","present","개발일기"],"categories":["ios"],"updated":"2020-09-14T08:28:54.145Z","content":"<p>하… 힘들 쓰… 뭐했다고 힘들지? 착각인가?</p>\n<p>어쨌든 오늘은 레이블과 화면전환을 이용해 데이터를 전달하는 용도로 만들어 보고자 한다.</p>\n<p>먼저 첫 화면을 만든다.</p>\n<h2 id=\"1.-화면구성-(프레임짜기)\">1. 화면구성 (프레임짜기)<a title=\"#1.-화면구성-(프레임짜기)\" href=\"#1.-화면구성-(프레임짜기)\"></a></h2>\n<p>1-1. 레이블2개, 버튼 1개 만들기</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">endViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> editButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> namelabel = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> emaillabel = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    </span><br><span class=\"line\">    namelabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">70</span>, y: <span class=\"number\">50</span>, width: view.frame.width - <span class=\"number\">140</span>, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    namelabel.backgroundColor = .black</span><br><span class=\"line\">    namelabel.textAlignment = .center</span><br><span class=\"line\">    namelabel.text = <span class=\"string\">\"이름\"</span></span><br><span class=\"line\">    namelabel.textColor = .white</span><br><span class=\"line\">    namelabel.font = <span class=\"type\">UIFont</span>.systemFont(ofSize: <span class=\"number\">30</span>)</span><br><span class=\"line\">    view.addSubview(namelabel)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    emaillabel.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">70</span>, y: <span class=\"number\">120</span>, width: view.frame.width - <span class=\"number\">140</span>, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    emaillabel.backgroundColor = .black</span><br><span class=\"line\">    emaillabel.textAlignment = .center</span><br><span class=\"line\">    emaillabel.text = <span class=\"string\">\"email주소\"</span></span><br><span class=\"line\">    emaillabel.textColor = .white</span><br><span class=\"line\">    emaillabel.font = <span class=\"type\">UIFont</span>.systemFont(ofSize: <span class=\"number\">30</span>)</span><br><span class=\"line\">    view.addSubview(emaillabel)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    editButton.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">70</span>, y: <span class=\"number\">220</span>, width: view.frame.width - <span class=\"number\">140</span>, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    editButton.setTitle(<span class=\"string\">\"정보변경하기\"</span>, <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    editButton.backgroundColor = .darkGray</span><br><span class=\"line\">    view.addSubview(editButton)</span><br><span class=\"line\">    </span><br><span class=\"line\">    editButton.addTarget(<span class=\"keyword\">self</span>, action: #selector(editbutton(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">editbutton</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lable과-button에서-기억해야할-것\">Lable과 Button에서 기억해야할 것<a title=\"#lable과-button에서-기억해야할-것\" href=\"#lable과-button에서-기억해야할-것\"></a></h3>\n<ul>\n<li>Lable은 text고 ,  Button은 setTitle이다.</li>\n<li>Lable Font size가 은근히 안외워 진다. emaillabel.font = UIFont.systemFont(ofSize: 30)</li>\n<li>CGrect의 <code>view.frame.width</code>는 기기의 비율을 기준으로 하기 때문에 어떤 기기에서든 동일한 비율값으로 정의된다. (많이 사용될 것 같다.)</li>\n<li>해당 변수를 전체에서 사용하고자 하면 변수를 바깥으로 뺴줘야한다.</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">endViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> editButton = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\"> <span class=\"keyword\">let</span> namelabel = <span class=\"type\">UILabel</span>()</span><br><span class=\"line\"> <span class=\"keyword\">let</span> emaillabel = <span class=\"type\">UILabel</span>()</span><br></pre></td></tr></table></figure>\n<p>이 외에는 다 외웠음 ㅎㅎ</p>\n<p>위의 코드로 메인화면이 완성되었다면, 아래의 화면을 확인 할 수 있을 것이다.</p>\n<p><img src=\"/image/Start-1.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>이후에 할 작업은 “정보변경하기(editbutton)” 버튼을 눌렀을 때 이동할 화면을 만들어 준다.</p>\n<h2 id=\"2.-전환될-화면-만들기\">2. 전환될 화면 만들기<a title=\"#2.-전환될-화면-만들기\" href=\"#2.-전환될-화면-만들기\"></a></h2>\n<p>버튼을 누르면 화면이 전환되는 방식으로 구현할 것이기 때문에 viewcontrollerr가 하나 더 필요하다.<br>\nviewcontrollerr를 하나 더 만들고 1-1과 마찬가지로 프레임을 짠다.</p>\n<p>2-1. [닫기], [저장] 버튼을 만들어준다.</p>\n<p>먼저 내가 구현할 화면은 present(ios13이상)타입의 화면이다. present는 화면이 아래서 위로 올라오는 방식인데, 이 경우 값전달이 안되는 게 기본값이다. (apple기본앱중 알람을 참고하면 된다.) 그냥 손으로 내려서 끌 수 있는 간편한 창같은 것인데… 화면전환으로 간편하게 값 전달을 하고싶다면 fullscreen타입으로 하면된다.</p>\n<p>그럼에도 굳이 present화면으로 값전달을 하고 싶은 경우라면… 그건 다음 post에 올리기로 하고…</p>\n<p>나는 닫기 버튼과 저장버튼을 만들기로 정했다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">startViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> nameTextField = <span class=\"type\">UITextField</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> emailTextField = <span class=\"type\">UITextField</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">    </span><br><span class=\"line\">    view.backgroundColor = .black</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> buttonX = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">    buttonX.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">50</span>, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    buttonX.setTitle(<span class=\"string\">\"닫기\"</span>, <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    buttonX.setTitleColor(.orange, <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    buttonX.backgroundColor = .black</span><br><span class=\"line\">    view.addSubview(buttonX)</span><br><span class=\"line\">    </span><br><span class=\"line\">    buttonX.addTarget(<span class=\"keyword\">self</span>, action: #selector(buttonOwn(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> buttonC = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">    buttonC.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">323</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">50</span>, height: <span class=\"number\">50</span>)</span><br><span class=\"line\">    buttonC.setTitle(<span class=\"string\">\"저장\"</span>, <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    buttonC.backgroundColor = .black</span><br><span class=\"line\">    buttonC.setTitleColor(.orange, <span class=\"keyword\">for</span>: .normal)</span><br><span class=\"line\">    view.addSubview(buttonC)</span><br><span class=\"line\">    </span><br><span class=\"line\">    buttonC.addTarget(<span class=\"keyword\">self</span>, action: #selector(buttonTwo(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .touchUpInside)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@objc</span> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buttonOwn</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span>&#123; <span class=\"comment\">//닫기버튼</span></span><br><span class=\"line\">    dismiss(animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buttonTwo</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span>&#123; <span class=\"comment\">//저장버튼</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>2-2. 텍스트필드를 2개 만든다. (nameLabel과 emailLable에 전달될 nameTextfield, emailTextfield을 만든다.)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nameTextField.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">15</span>, y: <span class=\"number\">250</span>, width: view.frame.width - <span class=\"number\">30</span>, height: <span class=\"number\">44</span>)</span><br><span class=\"line\">nameTextField.backgroundColor = .white</span><br><span class=\"line\">nameTextField.borderStyle = .roundedRect</span><br><span class=\"line\">nameTextField.keyboardType = .emailAddress</span><br><span class=\"line\">view.addSubview(nameTextField)</span><br><span class=\"line\"></span><br><span class=\"line\">  nameTextField.addTarget(<span class=\"keyword\">self</span>, action: #selector(textFieldN(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .editingDidEndOnExit)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">emailTextField.frame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">15</span>, y: <span class=\"number\">300</span>, width:  view.frame.width - <span class=\"number\">30</span>, height: <span class=\"number\">44</span>)</span><br><span class=\"line\">  emailTextField.backgroundColor = .white</span><br><span class=\"line\">  emailTextField.borderStyle = .roundedRect</span><br><span class=\"line\">  emailTextField.keyboardType = .emailAddress</span><br><span class=\"line\">  view.addSubview(emailTextField)</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  emailTextField.addTarget(<span class=\"keyword\">self</span>, action: #selector(textFieldE(<span class=\"number\">_</span>:)), <span class=\"keyword\">for</span>: .editingDidEndOnExit)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">textFieldN</span><span class=\"params\">(<span class=\"number\">_</span> sender: UITextField)</span></span>&#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">textFieldE</span><span class=\"params\">(<span class=\"number\">_</span> sender: UITextField)</span></span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"textfield에서-기억해야할-것\">TextField에서 기억해야할 것<a title=\"#textfield에서-기억해야할-것\" href=\"#textfield에서-기억해야할-것\"></a></h3>\n<ul>\n<li>borderStyle과 keyboardType을 지정해줘야한다. .으로 찍으면 종류가 많이 나온다.</li>\n<li>&quot;addTarget&quot;에 “for: .editingDidEndOnExit” 은 키보드에서 리턴키를 눌렀을 때 닫아주는 소스다. (아래 TextField사이클 참고)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">키보드가 뜰때 - DIdBegin</span><br><span class=\"line\">입력시 - Changed</span><br><span class=\"line\">리턴시 텍스트필드 내려감 - textfieldDidEndOnExit</span><br><span class=\"line\">리턴 이후에 뜸.(필연적으로..) PrimaryActionTriggered</span><br><span class=\"line\">종료시 - DidEnd</span><br></pre></td></tr></table></figure>\n<p>때에 따라 필요 기능이 있을 때에는 아래의 방식으로 구현하면 된다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DidEnd</span><span class=\"params\">(<span class=\"number\">_</span> sender: UITextField)</span></span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"5. DidEnd\"</span>)</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(sender.text)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//print(seder.text)할떄, 타입이 Any이면 오류남. Any -&gt; UITextField로 바꿔줘야 print가능.</span></span><br></pre></td></tr></table></figure>\n<p>위 코드대로 모두 짰다면 두 번째 화면이 완성된 모습을 볼 수 있다.</p>\n<p><img src=\"/image/start-5.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>이제 첫번째 화면과 두번 째 화면을 연결지을 일만 남았다.</p>\n<h2 id=\"3.-화면전환하기\">3. 화면전환하기<a title=\"#3.-화면전환하기\" href=\"#3.-화면전환하기\"></a></h2>\n<p>첫번째 화면(endViewController)에서 “정보변경하기” 버튼을 누르면 두 번째 화면(startViewController)으로 전환되는 모션이다.  <s>ViewController 이름을 반대로 지었다ㅜ 헷깔림 주의</s></p>\n<p>3-1.  버튼을 누르면 두번째 화면으로 이동</p>\n<p>버튼을 누르면 이동될 수 있도록 버튼 아래에 해당 코드를 넣는다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">editbutton</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> nextVC = startViewController()</span><br><span class=\"line\">  nextVC.modalPresentationStyle = .automatic</span><br><span class=\"line\">  present(nextVC, animated: <span class=\"literal\">true</span>) <span class=\"comment\">//아규먼트 nextVC를 넣어주고</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nextVC에 startViewController()을 호출하고, 모달을 단다.“nextVC.modalPresentationStyle = .automatic” 여기서 automatic은 기본값(present타입)이다. 만약 풀 스크린을 하고 싶다면 .찍고 fullScreen으로 하면된다. 아규먼트 지정까지하면, 버튼을 누를 때 두번째 화면으로 이동하는 것을 볼 수 있다.</p>\n<p>앞서 말했다시피, present타입으로 하면 화면을 내려서 껐을때, 텍스트필드에 적은 데이터가 전달이 안된다. 이를 용이하게 하기 위해, 그리고  present의 화면을 버튼을 이용해서 이전화면을 돌아가기 위해, 우리는 2-1에  [닫기], [저장] 을 만들었다 !! 좀더 완성도 높은 기능을 위해<br>\n아래를 참고하자.</p>\n<p>3-2. [닫기] 버튼을 누르면 이전화면, [저장]버튼을 누르면 데이터 전달.</p>\n<p>닫기동작 코드는 아주쉽다. dismiss만 달아주면 된다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buttonOwn</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span>&#123; <span class=\"comment\">//닫기버튼</span></span><br><span class=\"line\">  dismiss(animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>저장버튼도 누르면 화면이 꺼질 수 있다록 dismiss을 달아준다. 다만, [저장]은 데이터를 전달해야하기 때문에 아래와 같은 코드를 더 추가한다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buttonTwo</span><span class=\"params\">(<span class=\"number\">_</span> sender: UIButton)</span></span>&#123; <span class=\"comment\">//저장버튼</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> vc = <span class=\"keyword\">self</span>.presentingViewController <span class=\"keyword\">as</span>? endViewController &#123;</span><br><span class=\"line\">    vc.namelabel.text = nameTextField.text</span><br><span class=\"line\">    vc.emaillabel.text = emailTextField.text</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dismiss(animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>presentingViewController을 이용해 endViewController을 타입캐스팅 한다. 그리고 버튼을 누르면 텍스트필드의 입력값이 vc(뷰컨)의 해당 Label로 이동되도록 한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vc.namelabel.text &#x3D; nameTextField.text</span><br><span class=\"line\">vc.emaillabel.text &#x3D; emailTextField.text</span><br></pre></td></tr></table></figure>\n<p>그러면 textField에 값을 입력후 [저장]을 누르면, 아래와 같이 데이터가 전달되는 것을 볼 수 있다.</p>\n<p><img src=\"/image/Start-3.png\" alt=\"이미지\" class=\"φcx\"></p>\n<h2 id=\"4.데이터-영구적으로-남기기.\">4.데이터 영구적으로 남기기.<a title=\"#4.데이터-영구적으로-남기기.\" href=\"#4.데이터-영구적으로-남기기.\"></a></h2>\n<p>조금 아쉬운건(?) 기껏 레이블을 바꾸어 놓고 정보변경하기 창으로 가면 다시 입력값이 초기화 되어 있다는 것이다. 보안이 중요한 로그인화면에서는 유용하지만, 개인정보창이나 프로필같은 화면에서는 사용자가 본인의 입력값을 확인할 수 있도록 입력한 데이터를 영구히 보여줘야하는 경우도 있다.</p>\n<p>보통 데이터라면 데이터를 수집하는 방식을 선택하겠지만, 굳이 수집이 필요하지 않은 데이터라면 사용자의 화면상으로만 영구적으로 저장될 수 있도록 구현해도 좋을 것이다.</p>\n<p>일단은 많은 방법이 있겠지만, 그중에서도 간단하게… 입력값이 초기화 되지않고, 사용자가 수정하지 않는 이상 보존되어있는 방식으로 구현해보자.</p>\n<p><em>(단, 앱을 종료하면 데이터는 다시 초기화 된다. )</em></p>\n<p>앱 종료시에도 저장되는 기능은 다음 포스팅인 'UserDefaults’에서 다루기로 하고 일단은 간단하게만 !!</p>\n<p>4-1. [정보변경하기]를 눌러도 이전값이 보존되도록 구현</p>\n<p>뷰디드로드에 아래와 같은 고정값을 넣는다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> vc = <span class=\"keyword\">self</span>.presentingViewController <span class=\"keyword\">as</span>? endViewController &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">self</span>.nameTextField.text = vc.namelabel.text</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.emailTextField.text = vc.emaillabel.text</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>방법은 3-2와 비슷하다. 3-2처럼 레이블에 정보를 전달한 것처럼, 받은 정보를 다시 텍스트 필드로 전달하는 방식을 택하면 된다. 약간 복붙 느낌으로…ㅋ…</p>\n<p>그래서 , 뷰디드 로드에 동일하게 &quot;if let vc = self.presentingViewController as? endViewController {&quot;을 불러(연결해)주고, endViewController 의 Label text를 가져와서 해당 TextField에 넣어주면 된다.</p>\n<p>그러면 ??</p>\n<p>[정보변경하기] 버튼을 누르면 이전에 입력된 값을 그대로 불러오는 모습을 볼 수 있다.</p>\n<p><img src=\"/image/Start-2.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>👏🏻 👏🏻. 👏🏻 👏🏻 👏🏻</p>\n<p>잘하고 있는 건진 모르겠다만… ㅎ</p>\n<p>수집해야할 데이터가 아니고 화면상으로만 간단하게 보여줄 용도라면 레이블을 복사해오는 방식을 택하는 것도 나쁘지 않다…<br>\n하지만 앱을 종료하면 사라지는 현실이…<br>\n이 부분은 나중에 UserDefaults에서 따로 다루기로 !!</p>\n<p>(링크는 현재 준비중…)</p>\n<p>이것으로 또 하나 끝… 🥒</p>\n","prev":{"title":"[Swift] Segue(세그웨이)를 이용한 화면전환","link":"2020/05/08/Swift-Segue-세그웨이-를-이용한-화면전환"},"next":{"title":"[Swift]주문화면 구현하기 -2","link":"2020/05/06/Swift-주문화면-구현하기-2"},"plink":"https://Qussk.github.io/2020/05/06/Swift-화면전환-구현하기/","toc":[{"id":"1.-화면구성-(프레임짜기)","title":"1. 화면구성 (프레임짜기)","index":"1","children":[{"id":"lable과-button에서-기억해야할-것","title":"Lable과 Button에서 기억해야할 것","index":"1.1"}]},{"id":"2.-전환될-화면-만들기","title":"2. 전환될 화면 만들기","index":"2","children":[{"id":"textfield에서-기억해야할-것","title":"TextField에서 기억해야할 것","index":"2.1"}]},{"id":"3.-화면전환하기","title":"3. 화면전환하기","index":"3"},{"id":"4.데이터-영구적으로-남기기.","title":"4.데이터 영구적으로 남기기.","index":"4"}]}