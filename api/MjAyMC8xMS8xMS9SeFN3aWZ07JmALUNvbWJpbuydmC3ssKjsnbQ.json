{"title":"RxSwift와 Combin의 차이","date":"2020-11-11T17:05:56.000Z","date_formatted":{"ll":"Nov 11, 2020","L":"11/11/2020","MM-DD":"11-11"},"link":"2020/11/11/RxSwift와-Combin의-차이","tags":["ReactiveX","RxSwift"],"categories":["post"],"updated":"2020-11-12T03:23:50.562Z","content":"<p><img src=\"https://miro.medium.com/max/4096/1*Hy7lYBfxFey7f9pcSHRsAw.png\" alt=\"\" class=\"φcx\"></p>\n<h2 id=\"rxswift\">RxSwift<a title=\"#rxswift\" href=\"#rxswift\"></a></h2>\n<p>비동기 프로그래밍을 옵저버 스트림으로 이용해서 할 수 있는 ?API<br>\n비동기 프로그래밍을 쉽고, 간편하게 사용.</p>\n<p>An API for asyncheonous programming with observable streams</p>\n<h2 id=\"애플엔-없니-?\">애플엔 없니 ?<a title=\"#애플엔-없니-?\" href=\"#애플엔-없니-?\"></a></h2>\n<p>WWDS 2019 에서 Combin등장</p>\n<h2 id=\"스펙비교\">스펙비교<a title=\"#스펙비교\" href=\"#스펙비교\"></a></h2>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FEXqwN%2FbtqwpnRLJJJ%2FLdQrlbCxE2Gj2N7eBGMd11%2Fimg.png\" alt=\"\" class=\"φcx\"></p>\n<ul>\n<li>컴바인은 리눅스 지원안함. 대신에 UIKit for Mac =&gt; MacOS에서도 iPhone을 만들었던 코드 사용가능. SwiftUI?</li>\n<li>RxSwift의 Third-Party는 피드백이 빠르고, iOS업데이트 없이 가능. Combine의 First-party(built-in)는 내부적으로 사용하지 못하는 private한 API를 구현할 수 있는 장점이있음. 용량도  rxSwift보다 적음.</li>\n<li>RxSwift는 오픈소스 Combin은 애플지원</li>\n</ul>\n<h2 id=\"map,-filter,-reduce\">Map, Filter, reduce<a title=\"#map,-filter,-reduce\" href=\"#map,-filter,-reduce\"></a></h2>\n<p><img src=\"https://andreaslydemann.com/wp-content/uploads/2019/01/map-diagram.png\" alt=\"\" class=\"φcx\"></p>\n<ul>\n<li>일직선 |은  streams(스트림)</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/1400/1*C6p2EmpmmnKQjJT7XpaqEg.png\" alt=\"\" class=\"φcx\"></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bktbIR/btquSzfDW4C/Zw8BzH22HIkA2XbG6KIpf1/img.png\" alt=\"\" class=\"φcx\"></p>\n<h2 id=\"rx의-observable\">Rx의 Observable<a title=\"#rx의-observable\" href=\"#rx의-observable\"></a></h2>\n<p>Observable ==&gt; 데이터를 계속 받을 수 있는 것을 의미</p>\n<ul>\n<li>streams이 끝나기 전까지는 값을 계속 받을 수 있고, 구동을 해야지만 시작을 할 수 있음</li>\n</ul>\n<p><strong>Combine에서는 동일한 기능인 Publisher가 있음</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;Element&gt; &#x3D;&#x3D;&#x3D;&gt; class type</span><br></pre></td></tr></table></figure>\n<ul>\n<li>옵저버는 그대로 사용할 수 있음</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnyPublisher&lt;Output,Failure&gt; &#x3D;&#x3D;&#x3D;&gt; struct type</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Publisher는 프로토콜이기 때문에 퍼블리셔를 태책한 친구들을 우리가 사용할 수 있음.</li>\n</ul>\n<h2 id=\"subject\">Subject<a title=\"#subject\" href=\"#subject\"></a></h2>\n<h3 id=\"rx의-publichsubject\"><strong>Rx의 PublichSubject</strong><a title=\"#rx의-publichsubject\" href=\"#rx의-publichsubject\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = ps</span><br><span class=\"line\">    .<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">ps.onNext(<span class=\"number\">1</span>)   <span class=\"comment\">//10</span></span><br><span class=\"line\">ps.onNext(<span class=\"number\">2</span>)      <span class=\"comment\">//20</span></span><br><span class=\"line\">ps.onNext(<span class=\"number\">3</span>)      <span class=\"comment\">//30</span></span><br><span class=\"line\">ps.onCompleted()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>값 타입을 받음</li>\n</ul>\n<h3 id=\"combine의-passthroughsubject\"><strong>Combine의 PassthroughSubject</strong><a title=\"#combine의-passthroughsubject\" href=\"#combine의-passthroughsubject\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"type\">PassthroughSubject</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Error</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">c</span> = ps</span><br><span class=\"line\">    .<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * <span class=\"number\">10</span> &#125;</span><br><span class=\"line\">    .sink &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">ps.send(<span class=\"number\">1</span>) <span class=\"comment\">//10</span></span><br><span class=\"line\">ps.send(<span class=\"number\">2</span>) <span class=\"comment\">//20</span></span><br><span class=\"line\">ps.send(<span class=\"number\">3</span>) <span class=\"comment\">//30</span></span><br><span class=\"line\">ps.send(completion: .finiched)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>에러 값과 값 타입을 받음</li>\n</ul>\n<hr>\n<h3 id=\"rx의-behaviorsubject\"><strong>Rx의 BehaviorSubject</strong><a title=\"#rx의-behaviorsubject\" href=\"#rx의-behaviorsubject\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bs = <span class=\"type\">BehaviorSubject</span>&lt;<span class=\"type\">Int</span>&gt;(value: <span class=\"number\">555</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> diposable = bs</span><br><span class=\"line\">    .subscribe( onNext: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) <span class=\"comment\">//값프린트 555</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">Observable</span>.just(<span class=\"number\">486</span>) <span class=\"comment\">//486이란 값을 바인딩</span></span><br><span class=\"line\">  .bind(to: bs)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>값타입과, 초기값 설정</li>\n</ul>\n<h3 id=\"combine의-currentvaluesubject\"><strong>Combine의 CurrentValueSubject</strong><a title=\"#combine의-currentvaluesubject\" href=\"#combine의-currentvaluesubject\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cv = <span class=\"type\">CurrentValueSubject</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">Never</span>&gt;(<span class=\"number\">555</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancellable = currentValue</span><br><span class=\"line\">  .sink &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) <span class=\"comment\">//555</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Just</span>(<span class=\"number\">777</span>)</span><br><span class=\"line\">  .subscribe(cv) <span class=\"comment\">//486</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>값타입의 에러타입 설정, 초기값 설정</li>\n</ul>\n<p><strong>Rx의 subscribe() =&gt; Combine의 sink() 와 동일</strong><br>\n<strong>Rx의 bind(to:) =&gt; Combine의 subscribe() 와 동일</strong></p>\n<hr>\n<h3 id=\"rx의-disposable(디스포서블)\"><strong>Rx의 Disposable(디스포서블)</strong><a title=\"#rx의-disposable(디스포서블)\" href=\"#rx의-disposable(디스포서블)\"></a></h3>\n<p>: Dispos(처리하다, 중단하다) + ~able(~할 수 있는)</p>\n<ul>\n<li>DisposeBag() : Disposable의 가방</li>\n<li>ViewController에서 DisposeBag을 만들고, Disposable을 DisposeBag에 담음</li>\n<li>ViewController가 사라질떄, DisposeBag이 사라지면서 Disposable도 함께 사라짐.</li>\n<li>즉, Disposable이 라이프사이클을 함께 탐을 의미.</li>\n</ul>\n<p><em>DisposeBag이 있는 데 Combine에서도 cancellBag이 있나요???</em> ===&gt; 없습니다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">observable.just(<span class=\"number\">111</span>)</span><br><span class=\"line\">    .subscribe(onNext: &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Rx는 disposeBag이란 걸 만들어서 stream끝에 disposeBag의 DisposeBag을 넣음</li>\n</ul>\n<h3 id=\"rx의-cancellable(캔슬러블)\"><strong>Rx의 Cancellable(캔슬러블)</strong><a title=\"#rx의-cancellable(캔슬러블)\" href=\"#rx의-cancellable(캔슬러블)\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cancellable = [<span class=\"type\">Cancellable</span>]()</span><br><span class=\"line\"><span class=\"keyword\">let</span> cancellable = <span class=\"type\">Just</span>(<span class=\"number\">33</span>)</span><br><span class=\"line\">    .sink&#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</span><br><span class=\"line\">    cancellables.append(cancellable)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cancellable 을 배열로 만들어서, 해당 마지막에 해당 stream을 넣으면 됨.</li>\n<li>배열에 넣게 되면 Rx의 disposeBag과 동일한 기능을 하게 됨.</li>\n</ul>\n<h2 id=\"thread\">Thread<a title=\"#thread\" href=\"#thread\"></a></h2>\n<p><img src=\"http://reactivex.io/documentation/operators/images/schedulers.png\" alt=\"\" class=\"φcx\"></p>\n<ul>\n<li><code>observeOn</code>은  다운 스트림의  영향을 미침</li>\n<li><code>subscribeOn</code>은 최상위 스트림의 영향을 미침</li>\n<li>마지막 <code>observeOn</code>은 분홍색, 아래도 동일하게 감</li>\n</ul>\n<p><strong>Combine에서는 위와 동일하게 <code>receive(on: )</code>, <code>subscibe(on:)</code>,<code>receive(on: )</code>으로 진행됨</strong></p>\n<p><em>자신이 어떤 스레드인지 프린트하는 코드</em></p>\n<h3 id=\"rx\">Rx<a title=\"#rx\" href=\"#rx\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposBag = <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"type\">Observable</span>.just(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .<span class=\"keyword\">do</span>(onNext: &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMainThread)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .observeOn(<span class=\"type\">ConcurrentDispatchQueueScheduler</span>(qos: .background))</span><br><span class=\"line\">        .<span class=\"keyword\">do</span>(onNext: &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMainThread)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .subscribeOn(<span class=\"type\">MainScheaduler</span>.instance)</span><br><span class=\"line\">        .<span class=\"keyword\">do</span>(onNext: &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMainThread)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .subscribe(onNext: &#123;<span class=\"number\">_</span> <span class=\"keyword\">in</span> </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.inMainThread)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        .disposed(by:disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//subscribeOn가 메인쓰레드</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>최상위 스레드에서 do가 메인쓰레드. 그 아래 observeOn(ConcurrentDispatchQueueScheduler부터 메인스레드가 아니므로.</li>\n<li>true,  (main쓰레드가 아니기 때문에) false, false,false가 됨.</li>\n</ul>\n<h3 id=\"combine\">Combine<a title=\"#combine\" href=\"#combine\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cancellables = [<span class=\"type\">Cancellable</span>]()</span><br><span class=\"line\">cancellables.append(</span><br><span class=\"line\">    <span class=\"type\">Just</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .handleEvents(receiveOutput: &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMainThread)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .receive(on: <span class=\"type\">DispatchQueue</span>.global())</span><br><span class=\"line\">    .handleEvents(receiveOutput: &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMAinThread)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .subscribe(on: <span class=\"type\">DispatchQueue</span>.main)</span><br><span class=\"line\">    .handleEvents(receiveOutput: &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMainThread)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .sink &#123; value <span class=\"keyword\">in</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.isMainThread)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>위와 동일</li>\n<li>main쓰레드가 아니기 때문에 false, false,false가 됨.</li>\n</ul>\n<p><strong>기대결과 VS 현실</strong></p>\n<p>기대결과 : true, false, false, false.<br>\nCombine 현실 :  true, false, false, false. or false,false,false,false</p>\n<ul>\n<li>Combine ==&gt; 동일한 코드에서 다른 결과가 나오는 경우 발생. 아직 Combine을 믿고 쓸만한 정도는 아님.Combine을 사용할 때, 여러 테스트후 사용하길 권장.</li>\n</ul>\n<p>참고 :</p>\n<p><a href=\"https://medium.com/@jang.wangsu/rxswift-rxswift-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-4b5187d07a33\" target=\"_blank\">RxSwift 시작하기</a><br>\n<a href=\"http://reactivex.io/documentation/ko/scheduler.html\" target=\"_blank\">RxSwift 스케줄러 </a><br>\n<a href=\"https://medium.com/@ggaa96/rxswift-3-learn-about-operators-99bd1c44a5f9\" target=\"_blank\">https://medium.com/@ggaa96/rxswift-3-learn-about-operators-99bd1c44a5f9</a><br>\n<a href=\"https://andreaslydemann.com/tranforming-operators-in-rxswift/\" target=\"_blank\">RxSwift에서 연산자 변환 : MAP, FLATMAP &amp; FLATMAPLATEST</a></p>\n","prev":{"title":"[iOS]xcode 메모리누수 확인","link":"2020/12/05/iOS-xcode-메모리누수-확인"},"next":{"title":"[Swift] CustomStringConvertible - 원하는 데이터만 커스텀하여 출력","link":"2020/10/17/Swift-CustomStringConvertible-원하는-데이터만-커스텀하여-출력"},"plink":"https://Qussk.github.io/2020/11/11/RxSwift와-Combin의-차이/","toc":[{"id":"rxswift","title":"RxSwift","index":"1"},{"id":"애플엔-없니-?","title":"애플엔 없니 ?","index":"2"},{"id":"스펙비교","title":"스펙비교","index":"3"},{"id":"map,-filter,-reduce","title":"Map, Filter, reduce","index":"4"},{"id":"rx의-observable","title":"Rx의 Observable","index":"5"},{"id":"subject","title":"Subject","index":"6","children":[{"id":"rx의-publichsubject","title":"Rx의 PublichSubject","index":"6.1"},{"id":"combine의-passthroughsubject","title":"Combine의 PassthroughSubject","index":"6.2"},{"id":"rx의-behaviorsubject","title":"Rx의 BehaviorSubject","index":"6.3"},{"id":"combine의-currentvaluesubject","title":"Combine의 CurrentValueSubject","index":"6.4"},{"id":"rx의-disposable(디스포서블)","title":"Rx의 Disposable(디스포서블)","index":"6.5"},{"id":"rx의-cancellable(캔슬러블)","title":"Rx의 Cancellable(캔슬러블)","index":"6.6"}]},{"id":"thread","title":"Thread","index":"7","children":[{"id":"rx","title":"Rx","index":"7.1"},{"id":"combine","title":"Combine","index":"7.2"}]}]}