{"title":"프로토콜 지향 - POP 장점","date":"2020-12-20T17:52:14.000Z","date_formatted":{"ll":"Dec 20, 2020","L":"12/20/2020","MM-DD":"12-20"},"link":"2020/12/20/프로토콜-지향-POP-장점","tags":["POP","Swift"],"categories":["post"],"updated":"2020-12-20T08:54:54.627Z","content":"<p>POP방식은 애플에서 권장하고 있는 프로그래밍 방식이기때문에 공부의 필요성을 느껴 공부를 시작했습니다.</p>\n<p>OOP에서는 subclassing, Overloading, Overriding을 통해 다형성을 구현하기 때문에, 서브클래스가 슈퍼클래스의 공통 코드를 그대로 활용하거나 필요시 자신이 따로 구현하여 덮어 씁니다.<br>\n반면 POP에서는 프로토콜을 통해 다형성을 구현하기 때문에 프로토콜 확장을 통해 공통 코드를 제공합니다.</p>\n<h3 id=\"oop의-서브클래싱이-가지는-불편점\">OOP의 서브클래싱이 가지는 불편점<a title=\"#oop의-서브클래싱이-가지는-불편점\" href=\"#oop의-서브클래싱이-가지는-불편점\"></a></h3>\n<p><strong>1. 슈퍼클래스에 너무 종속적이다(그대로 물려받기 때문에 불필요한 코드도 함께 물려받아야한다 )</strong></p>\n<p><strong>2. 벨류 타입을 사용할 수 없다. (굳이 값타입으로 쓰여도되는 코드를 레퍼런스 타입으로 바꿔야한다)</strong></p>\n<h3 id=\"pop의-편리점\">POP의 편리점<a title=\"#pop의-편리점\" href=\"#pop의-편리점\"></a></h3>\n<p><strong>1. 위의 2가지의 불편점을 해소해준다.</strong></p>\n<p>(구현체 입장에서 알아야 할 것은 프로토콜이 요구하는 변수와 함수 뿐이며, 프로토콜에 정의된 인터페이스에 집중하면 된다. 그리고, 프로토콜을 따르는 것에도 끈끈하게 엮어있는 부분이 없어 독립적이며 그래서 안전하다. '이 프로토콜을 따른다’라는 공통점뿐이므로 간편하다)</p>\n<p><strong>2. 다수의 프로토콜을 따르는 것이 가능하다.</strong><br>\n상속 구조에서는 오직 하나의 슈퍼클래스만 가질 수 있지만, 프로토콜의 경우에는 다수의 프로토콜을 체택할 수 있으며 물려받기 때문에 재사용의 개념이 아니므로 다중 상속의 문제점으로 언급되는 죽음의 다이아몬드 이슈에서도 자유롭다.</p>\n","next":{"title":"[iOS]xcode 메모리누수 확인","link":"2020/12/05/iOS-xcode-메모리누수-확인"},"plink":"https://Qussk.github.io/2020/12/20/프로토콜-지향-POP-장점/","toc":[{"id":"oop의-서브클래싱이-가지는-불편점","title":"OOP의 서브클래싱이 가지는 불편점","index":"1"},{"id":"pop의-편리점","title":"POP의 편리점","index":"2"}]}