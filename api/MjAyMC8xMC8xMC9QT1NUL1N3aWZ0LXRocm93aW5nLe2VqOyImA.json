{"title":"Error Handling(에러핸들링) - throwing함수, do-catch try, Result","date":"2020-10-10T19:41:57.000Z","date_formatted":{"ll":"Oct 10, 2020","L":"10/10/2020","MM-DD":"10-10"},"link":"2020/10/10/POST/Swift-throwing-함수","tags":["ErrorHandling","Result","Swift","do-catch,try","throwing"],"categories":["post"],"updated":"2020-10-12T02:42:54.852Z","content":"<h1 id=\"error-handling이란?\">Error Handling이란?<a title=\"#error-handling이란?\" href=\"#error-handling이란?\"></a></h1>\n<p>에러의 방향성을 만들어 주는 것이다. 에러시 어떤 것을 리턴을 할 건지… 특정 함수를 실행할건지… 앱을 종료할 것인지 등등… 에러에 대한 대응 및 복구에 대한 작업!!!</p>\n<p>그 전에 <strong>에러</strong>에 대해 먼저 이해하고 넘어가자!</p>\n<p>에러의 종류에는 '컴파일 에러’와 '런타임 에러’가 있다. '컴파일 에러’는 대부분 문법과 관련된 내용으로, 컴파일러가 제공해주는 정보를 통해 비교적 쉽게 수정이 가능하다. 예를 들면, 엑스코드가 에러났다고 빨갛게 에러창 보여주는 것!</p>\n<p>이와 다르게 런타임 에러는 프로그램이 실행되는 동안 발생한다. 이 이유로 '런타임 에러’가 에러 핸들링(Error Handling)으로 다뤄지는 주요 내용이 된다! 런타임에러는 디바이스나 리소스 상태에 따라 에러가 발생한다. 예를 들면, 잘못된 코드로 인해, 특정 지역에서 앱이 종료되는 것이다.(프로그램이 강제로 종료함) 이렇게 앱이 종료되는 것을 막기위해 해주는 작업이 에러 핸들링!!</p>\n<p>에러 핸들링을 하게 되면, 발생가능한 에러를 직접처리해주기 때문에 강제종료 없이 계속 실행이 가능해진다. 발생가능한 에러를 미리 처리해 두면 프로그램을 크래시 없이 계속 사용할 수 있게 되고, 강제 종료 횟수가 줄어듦에 따라 앱의 사용성이 증가된다.</p>\n<h2 id=\"개념-?\">개념 ?<a title=\"#개념-?\" href=\"#개념-?\"></a></h2>\n<p>Swift에서는 런타임에 에러가 발생한 경우 이를 처리하기 위한 <strong>발생(throwig)</strong>, <strong>감지(catching)</strong>, <strong>전파(propagating)</strong>,<br>\n<strong>조작(manipulating)</strong> 을 지원하는 일급 클래스를 제공한다.</p>\n<p>어떤 함수, 메소드 혹은 Initializer가 에러를 발생 시킬 수 있다는 것을 알리기 위해 throw 키워드를 함수 선언부의 파라미터 뒤에 붙인다. throw 키워드로 표시된 함수를 <strong>throwing function</strong>이라고 부르며, 만약 함수가 리턴 값을 명시했다면 throw 키워드는 리턴 값 표시 기호인 -&gt; 전에 적으면 된다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adultAge</span><span class=\"params\">(text: String)</span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>오직 throwing fuction만이 에러를 발생시킬 수 있으며, 만약 throwing function이 아닌 함수에서 throw가 발생한다면 반드시 그 함수 내에서 throw에 대해 처리되어야 한다.</p>\n<h2 id=\"에러-처리(handling-errors)\">에러 처리(Handling Errors)<a title=\"#에러-처리(handling-errors)\" href=\"#에러-처리(handling-errors)\"></a></h2>\n<p>에러를 던지고(?) 싶다면 미리 정의를 해줘야한다. 던진다고 표현한 이유는 <strong>throws</strong>가 사전적으로 던진다는 의미를 가지고 있기 때문이다. 이후 에러 형식부터 선언한다. 에러 형식은 특별한 형식이 아니고 에러 프로토콜을 채용하면 에러 형식이 된다. 그리고 에러는 대부분  열거형으로 선언한다.</p>\n<h1 id=\"throwing함수\"><strong>throwing함수</strong><a title=\"#throwing함수\" href=\"#throwing함수\"></a></h1>\n<h2 id=\"에러를-미리-정의한다.-(열거형)\">에러를 미리 정의한다. (열거형)<a title=\"#에러를-미리-정의한다.-(열거형)\" href=\"#에러를-미리-정의한다.-(열거형)\"></a></h2>\n<p>모든 에러는 열거형으로 쓴다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">APIError</span>: <span class=\"title\">Error</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> aError</span><br><span class=\"line\">    <span class=\"keyword\">case</span> bError</span><br><span class=\"line\">    <span class=\"keyword\">case</span> cError</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a: <span class=\"type\">APIError</span></span><br></pre></td></tr></table></figure>\n<p>APIError라는 Error타입의 열거형을 만든다. APIError은 타입으로 쓸 수 있다.</p>\n<p><strong>[ 열거형 ? ]</strong><br>\n===&gt; 한정된 케이스안에서 선택가능한 타입</p>\n<ul>\n<li>예시 ) &quot;월화수목금토일&quot;은 한정된 그룹이다. 그러므로 열거형으로 선언될 수 있다. 이 외에가 없는 것.</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Weekdays</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> monday</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tuesday</span><br><span class=\"line\">    <span class=\"keyword\">case</span> wednesday</span><br><span class=\"line\">    <span class=\"keyword\">case</span> thursday</span><br><span class=\"line\">    <span class=\"keyword\">case</span> friday</span><br><span class=\"line\">    <span class=\"keyword\">case</span> saturday</span><br><span class=\"line\">    <span class=\"keyword\">case</span> sunday</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> day: <span class=\"type\">Weekdays</span> = .monday</span><br></pre></td></tr></table></figure>\n<h2 id=\"throws-/-throw\">throws / throw<a title=\"#throws-/-throw\" href=\"#throws-/-throw\"></a></h2>\n<p>정의할때는 throws -&gt; 에러를 던지겠다! 선언한다. 이후 각각 던질 때는 throw로 던져 구분한다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//정의할때는 throws -&gt; 에러를 던지겠다! 선언</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parsing</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">APIError</span>.aError <span class=\"comment\">//각각 던질때는 throw</span></span><br><span class=\"line\">        (aError에 대한 코드)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">APIError</span>.bError</span><br><span class=\"line\">        (bError에 대한 코드)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이것을 <strong>throwing함수</strong>라고 한다.</p>\n<h1 id=\"do-catch으로-에러처리\"><strong>do-catch으로 에러처리</strong><a title=\"#do-catch으로-에러처리\" href=\"#do-catch으로-에러처리\"></a></h1>\n<p>throwing함수를 이해했다면, do-catch으로 에러 처리가 가능하다.<br>\ndo-catch는 do블럭과 catch블럭으로 구성되어 있다. do블럭은 필수 블럭이고, 여기서는 가장 기본식인 <strong>try</strong> 표현식을 사용해서, 에러가 발생할 수 있는 코드를 실행할 것이다.</p>\n<p>try표현식에서 에러가 발생하면 do블럭에서 이어지는 코드는 실행되지 않고, 아래쪽에 있는 catch블럭이 실행된다. catch블럭은 do블럭에서 발생한 에러를 처리한다. 패턴으로 선언하고 싶은 에러를 선언하거나, 패턴을 생략하고 전체에러를 처리할 수도 있다.</p>\n<p>where절을 추가해서, 매칭시킬 에러패턴에 조건을 추가할 수 있다.<br>\ndo 에서 발생가능한 모든 에러는 catch블럭을 통해 모두 처리되어야하고, catch블럭을 생략한 경우에는 에러가 다른 코드로 전파될 수 있도록 구현해야한다.</p>\n<h2 id=\"try(가장-일반적인)\"><em>try(가장 일반적인)</em><a title=\"#try(가장-일반적인)\" href=\"#try(가장-일반적인)\"></a></h2>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//경우 1. try (가장 일반적인)</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">try</span> parsing()</span><br><span class=\"line\">    <span class=\"comment\">// 그 다음 코드 - 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 그 다음 코드 - 2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error.localizedDescription)<span class=\"comment\">//지역화된. 오류면 해당언어로 콘솔창에 보여줘!.별거아님</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">//error는 일반적인 타입</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> e = error <span class=\"keyword\">as</span>? <span class=\"type\">APIError</span> </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> e &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .aError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"a에러발생\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .bError:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">\"b에러발생\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>error는 일반적인 타입이므로 한번 타입캐스팅을 해서 사용한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let e &#x3D; error as? APIError</span><br></pre></td></tr></table></figure>\n<p>이 부분…</p>\n<h2 id=\"try?\"><em>try?</em><a title=\"#try?\" href=\"#try?\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 경우 2. try?</span></span><br><span class=\"line\"><span class=\"comment\">//do catch로 감쌀 필요없음. 나는 에러처리에 관심없어.</span></span><br><span class=\"line\"><span class=\"comment\">//왜냐 ? 에러인 경우 nil이 나옴</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">try</span>? parsing() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//b의 타입을 보면 옵셔널 인트임 Int? -&gt; 그럼 무슨 말인지 이해가 됨..</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"try-!\"><em>try !</em><a title=\"#try-!\" href=\"#try-!\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//경우3.try!</span></span><br><span class=\"line\"><span class=\"comment\">//에러발생시 앱종료. -&gt; 이러한 이유로 try!를 쓰는 경우 거의 없음.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">c</span> = <span class=\"keyword\">try</span>! parsing()</span><br></pre></td></tr></table></figure>\n<p>// 에러처리 방법 3가지</p>\n<ol>\n<li>do-catch문 사용(코드에서 발생한 에러를 개별적으로 처리할때)</li>\n<li>try표현식 + 옵셔널 바인딩</li>\n<li>전달받은 에러를 다른 코드블럭으로 다시 전달(hand over)</li>\n</ol>\n<h1 id=\"result타입으로-에러처리\"><strong>Result타입으로 에러처리</strong><a title=\"#result타입으로-에러처리\" href=\"#result타입으로-에러처리\"></a></h1>\n<h3 id=\"[result을-쓰는-이유-?]\"><strong>[Result을 쓰는 이유 ?]</strong><a title=\"#[result을-쓰는-이유-?]\" href=\"#[result을-쓰는-이유-?]\"></a></h3>\n<p>Result과 do-catch, try는 큰 차이가 있다. do-catch, try의 경우 에러타입과 성공타입을 함께 쓸 수 없다. do(성공)와 catch(에러)의 구분. 그러나 Result을 사용하게 되면, 한 함수에 성공, 에러 모두 함께 쓸 수 있다. 정리하면, Result Type은 에러랑 정상적인거랑 타입으로 묶어서 던지는 것!!</p>\n<h3 id=\"예시1\"><em>예시1</em><a title=\"#예시1\" href=\"#예시1\"></a></h3>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.에러 미리정의</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">NumberError</span>: <span class=\"title\">Error</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> negativeNumber</span><br><span class=\"line\">    <span class=\"keyword\">case</span> evenNumber</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">AnotherNumberError</span>: <span class=\"title\">Error</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tooLarge</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이런식으로 정의 된 에러가 있다면,</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2. Throwing 함수로 선언되어 있음 (홀수만 받는 함수)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (에러를 던질 수 있다.) \"에러의 형식\"을 특정하지는 못함</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">process</span><span class=\"params\">(oddNumber: Int)</span></span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Int</span> &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> oddNumber &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;              </span><br><span class=\"line\">    <span class=\"comment\">// 음수일 경우 NumberError의 negativeNumber을 던진다. </span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">NumberError</span>.negativeNumber</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> !oddNumber.isMultiple(of: <span class=\"number\">2</span>) <span class=\"keyword\">else</span> &#123;    </span><br><span class=\"line\">    <span class=\"comment\">// !짝수일 경우 NumberError의 evenNumber을 던진다.</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">NumberError</span>.evenNumber</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> oddNumber &lt; <span class=\"number\">1000</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1000이하인 경우 AnotherNumberError의 tooLarge을 던진다.</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">AnotherNumberError</span>.tooLarge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//정상적인 처리</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oddNumber * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>여기서, 위와 같은 방식으로만 처리한다면 문제가 있다. throws 키워드는 코드에서 에러를 던질 수 있다는 것은 나타내지만, 에러의 형식을 특정하지는 못하므로, 이렇게만 처리하면 catch블럭에서 &quot;에러 프로토콜&quot;형식만 받을 수 있게 된다(구체화된 실제 에러 형식이 아님!!!)</p>\n<p>즉, process함수가 던지는 실제 에러 형식을 알아야 에러를 제대로 처리한 것!!!</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//3.</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">try</span> process(oddNumber: <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error.localizedDescription)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이런식으로 !!..</p>\n<p>더 제대로 처리 해보기 ↓</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">try</span> process(oddNumber: <span class=\"number\">1</span>) <span class=\"comment\">// try 표현식으로 호출</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> myErr <span class=\"keyword\">as</span> <span class=\"type\">NumberError</span> &#123;    <span class=\"comment\">// 실제 에러형식으로 타입캐스팅(에러의 올바른 처리를 위해)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> myErr &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .negativeNumber:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"negative number\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .evenNumber:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"even number\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;     <span class=\"comment\">// catch 블록 지우면 ===&gt; 런타임 에러발생 가능(AnotherNumberError를 처리하고 있지 않기 때문에)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error.localizedDescription)   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// AnotherNumberError를 올바르게 처리한 것은 아님 (에러처리에서 논리적인 오류가 발생할 가능성이 높아짐)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"delayed-error-handling\">Delayed Error Handling<a title=\"#delayed-error-handling\" href=\"#delayed-error-handling\"></a></h3>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Result(catching: &lt;#T##() throws -&gt; _#&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">//Result형식은 \"throwing클로저로 초기화\"하는 생성자를 제공한다. </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"type\">Result</span> &#123; <span class=\"keyword\">try</span> process(oddNumber: <span class=\"number\">1</span>) &#125;  <span class=\"comment\">// Result 객체(연관값)가 저장</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> result &#123; <span class=\"comment\">//연관값으로 저장된 에러를 처리 (에러를 처리하는 시점이 함수를 호출하는 시점에서 작업결과를 사용하는 시점으로 이동) Delayed Error Handling</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> data):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data) <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error.localizedDescription)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 성공과 실패가 더욱 명확해짐</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"[제네릭-이용하여-처리해보기]\"><strong>[제네릭 이용하여 처리해보기]</strong><a title=\"#[제네릭-이용하여-처리해보기]\" href=\"#[제네릭-이용하여-처리해보기]\"></a></h3>\n<ul>\n<li>throws 키워드 삭제, 리턴형 형식 선언</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">processResult</span><span class=\"params\">(oddNumber: Int)</span></span> -&gt; <span class=\"type\">Result</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">NumberError</span>&gt; &#123; <span class=\"comment\">//Result타입으로 에러를 처리할때, 함수에서 직접 에러를 던지지 않고, \"연관값\"으로 저장해서 리턴</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> oddNumber &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 음수일 경우</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Result</span>.failure(<span class=\"type\">NumberError</span> .negativeNumber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> !oddNumber.isMultiple(of: <span class=\"number\">2</span>) <span class=\"keyword\">else</span> &#123;    </span><br><span class=\"line\">    <span class=\"comment\">// 짝수일 경우</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> .failure(.evenNumber)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    guard oddNumber &lt; 1000 else &#123;             </span></span><br><span class=\"line\"><span class=\"comment\">// AnotherNumberError는 리턴할 수 없음</span></span><br><span class=\"line\"><span class=\"comment\">//        return AnotherNumberError.tooLarge</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> .success(oddNumber * <span class=\"number\">2</span>)          </span><br><span class=\"line\">    <span class=\"comment\">// 연관값으로 리턴</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = processResult(oddNumber: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> result1 &#123; <span class=\"comment\">// Delayed Error Handling</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> data):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(error.localizedDescription)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>제네릭을 이용하면, 이런 식의 처리도 가능해진다…!! 좀더 쉽게 이해하고자 한다면 아래의 예제를 보자 , , , ,!</p>\n<h2 id=\"1.-에러-정의(열거형)\">1. 에러 정의(열거형)<a title=\"#1.-에러-정의(열거형)\" href=\"#1.-에러-정의(열거형)\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;1.에러정의</span><br><span class=\"line\">enum APIError2 : Error &#123;</span><br><span class=\"line\">  case aError</span><br><span class=\"line\">  case bError</span><br><span class=\"line\">  case cError</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>에러는 동일하게 열거형으로 정의한다.</p>\n<h2 id=\"2.-result-이용-함수-만들기.\">2. Result 이용 함수 만들기.<a title=\"#2.-result-이용-함수-만들기.\" href=\"#2.-result-이용-함수-만들기.\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">plusFunction</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Result</span>&lt;<span class=\"type\">Int</span>, <span class=\"type\">APIError2</span>&gt; &#123; <span class=\"comment\">//정상적인 경우엔 Int, 에러인 경우 Error</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Result</span>.success(<span class=\"number\">10</span>) <span class=\"comment\">//성공케이스</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Result</span>.failure(<span class=\"type\">APIError2</span>.bError) <span class=\"comment\">//에러케이스</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">plusFunction()</span><br></pre></td></tr></table></figure>\n<p>Result&lt;Int, APIError2&gt; 는 제네릭 형식이다. 제네릭을 쓴 이유는 모든 자료형을 처리하기 위해 쓴다. 성공케이스가 Int이든, 에러케이스가 에러타입의 열거형이든 한 함수로 묶을 수 있게 된다.<br>\n실행후, 결론적으로 plusFunction() 은 Result타입이 되어, 우의 do-catch, try 쓸 필요가 없게 된다. Result의 가장 큰 장점은 do catch, try 를 쓰지 않아도 되는 점. 코드 길이!</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//이렇게도 사용가능. </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = plusFunction()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> result &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> a) :</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .failure(<span class=\"keyword\">let</span> error) :</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  <span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"예시\">예시<a title=\"#예시\" href=\"#예시\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//성공,에러를 아예 이 타입에 담고 싶은 것</span></span><br><span class=\"line\"><span class=\"comment\">//1.에러정의</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Result1</span>&lt;<span class=\"title\">Success</span>, <span class=\"title\">Failure</span>&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> success(<span class=\"type\">Success</span>) <span class=\"comment\">//성공(데이터) -(Success)은 연관값. 열거형에서 연관값이란 추가적인, 구체적인 정보를 담기 위한 것.(선택사항임)</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> failure(<span class=\"type\">Failure</span>) <span class=\"comment\">//에러</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Weekday</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//월요일의 (몇시)를 넣고 싶은 것.. //타입이 달라도 된다. (String)</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> monday(<span class=\"type\">Int</span>) </span><br><span class=\"line\">  <span class=\"keyword\">case</span> tuesday(<span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dat : <span class=\"type\">Weekday</span> = <span class=\"type\">Weekday</span>.monday(<span class=\"number\">8</span>) <span class=\"comment\">//월요일 8시</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//제네릭으로 하면 이런 느낌. </span></span><br><span class=\"line\"><span class=\"comment\">//enum Weekday&lt;T, A&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  case monday(T)</span></span><br><span class=\"line\"><span class=\"comment\">//  case tuesday(A)</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br></pre></td></tr></table></figure>\n<p>이렇게 …!!</p>\n<h2 id=\"generics-왜-써야할-까?\">Generics 왜 써야할 까?<a title=\"#generics-왜-써야할-까?\" href=\"#generics-왜-써야할-까?\"></a></h2>\n<p>제네릭이 자주 등장하는 이유는 형식에 의존하지 않는 범용코드 작성이 가능하고, 코드의 재사용성 높아 유지보수하기에 적합하여(편의성 증대) 주로 사용되는 방식이다. Generics의 가장 큰 장점은 형식에 관계없이, 한번의 구현으로 모든 자료형을 처리한다는 점!!</p>\n<h3 id=\"예시2\"><em>예시2</em><a title=\"#예시2\" href=\"#예시2\"></a></h3>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapInteger</span><span class=\"params\">(lhs: <span class=\"keyword\">inout</span> Int, rhs: <span class=\"keyword\">inout</span> Int)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> tmp = lhs</span><br><span class=\"line\">   lhs = rhs</span><br><span class=\"line\">   rhs = tmp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"inout은-왜-쓸까-?-(코너-속의-코너)-그-전에-함수실행의-메모리-구조-먼저-이해해보자.\"><strong>inout</strong>은 왜 쓸까 ? (코너 속의 코너) 그 전에 함수실행의 메모리 구조 먼저 이해해보자.<a title=\"#inout은-왜-쓸까-?-(코너-속의-코너)-그-전에-함수실행의-메모리-구조-먼저-이해해보자.\" href=\"#inout은-왜-쓸까-?-(코너-속의-코너)-그-전에-함수실행의-메모리-구조-먼저-이해해보자.\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;main()&#123; &lt;--- 1.프레임워크엔 main함수가 숨어있다. </span><br><span class=\"line\"></span><br><span class=\"line\">func dosomething(a: Int, b: Int) -&gt; Int &#123;</span><br><span class=\"line\">&#x2F;&#x2F; a는 let이기 때문에 a &#x3D; 5로 마음대로 바꿀 수 없고, let a &#x3D; a로 선언한다. 왜 ? 파라미터는 무조건 상수이기 때문!!!</span><br><span class=\"line\"></span><br><span class=\"line\">  let a &#x3D; a </span><br><span class=\"line\">  let b &#x3D; b</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F;⭐️ 정 변경하고 싶은 경우 이런식으로 c라는 변수를 만들어 변경</span><br><span class=\"line\">  var c &#x3D; a</span><br><span class=\"line\">  c +&#x3D; 3</span><br><span class=\"line\">  </span><br><span class=\"line\">  return c + b &#x2F;&#x2F;10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var x &#x3D; 3</span><br><span class=\"line\">var y &#x3D; 4</span><br><span class=\"line\"></span><br><span class=\"line\">dosomething(a: 3, b: 4) &#x2F;&#x2F;보통 이런식으로 변경하지만 </span><br><span class=\"line\">dosomething(a: x, b: y) &#x2F;&#x2F;인 경우.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;2. inout이해하기</span><br><span class=\"line\">var a &#x3D; 10 </span><br><span class=\"line\">var b &#x3D; 20</span><br><span class=\"line\"></span><br><span class=\"line\">swapInteger(lhs: &amp;a, rhs: &amp;b)</span><br><span class=\"line\">a &#x2F;&#x2F;20</span><br><span class=\"line\">b &#x2F;&#x2F;10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1.-함수실행시-메모리구조-이해하기\"><strong>1. 함수실행시 메모리구조 이해하기</strong><a title=\"#1.-함수실행시-메모리구조-이해하기\" href=\"#1.-함수실행시-메모리구조-이해하기\"></a></h3>\n<p>xcode든 playground든 프레임워크 가장 상위에 main()함수가 숨어 있다. dosomething()이라는 함수 가 있을 때, 함수 안에선 <strong>let a = a</strong> 이런식으로 사용해야한다. 이유는 파라미터는 항상 상수이기 때문. 값을 꼭 바꾸고 싶다면 c 라는 임의의 변수를 하나 만들어 위처럼 사용할 수도 있다. <strong>inout</strong>을 알아보기 전에 <strong>함수실행의 메모리 구조</strong>에 대해 알아보자 ! 직접 만들어서 이해해봄!!</p>\n<p><img src=\"/image/POST/funcframe.png\" alt=\"\" class=\"φcx\"></p>\n<p>외우자, <strong>코 데 힙 스 !</strong><br>\n위 이미지는 함수실행의 메모리 구조를 보여준다. 함수실행은 항상 스택을 만든다. 스택1에 함수실행1이라고 이해하면 되고, 함수가 실행되고 그것을 마치면 스택은 사라진다. 즉, 모든 일이 종료되면 여튼 없어짐!!</p>\n<p>이를 바탕으로 위 예시 코드로 설명할 때, main()가 가장 먼저 실행되고, 다음으로 dosomething(a: 3, b: 4)가 실행된다. x,y의 공간인 [스택 1]이 먼저 생성된다. 그 다음으로 a,b,c의 공간 [스택 2]가 생성된다.  dosomething(a: x, b: y)의 함수가 실행될 때, x는 a값을 복사해오고, y는 b값을 복사해온다. 함수가 return c + b에 따라 10을 갖는다. 이때 10은 임시거처에 있고 함수는 종료되면서 임시 값이 main()으로 전해질 수 있는 상태다.</p>\n<p>스택의 과정은 일단 이렇고, 함수를 실행할 때 파라미터는 let이라는 점! 나만의 공간을 만들고 던지는 변수 !! 그 변수를 복사해서 사용하는 것 !! 이 기본적인 함수실행의 메모리 구조인 것이다.</p>\n<h2 id=\"그래서-...-inout은-왜-쓸까-?\">그래서 … <strong>inout</strong>은 왜 쓸까 ?<a title=\"#그래서-...-inout은-왜-쓸까-?\" href=\"#그래서-...-inout은-왜-쓸까-?\"></a></h2>\n<h3 id=\"2.-inout이해하기\"><strong>2. inout이해하기</strong><a title=\"#2.-inout이해하기\" href=\"#2.-inout이해하기\"></a></h3>\n<p>inout을 쓰는 가장 큰 이유는 메모리 주소를 참조한다는 것이다.(?) 띠용… 다시 말해보자면…</p>\n<p>inout은 복사해서 사용하는 것이 아니라, inout을 붙인 파라미터의 함수를 실행할 때, 호출 시 dosomething(a: &amp;x, b: &amp;y)이런 식으로 호출하고, 이 형식은 메모리 주소를 참조한다는 의미이다.</p>\n<p>복사하는 순간 a를 쓰고, b를 쓰는 게 아니라… a를 가르키고 b를 가르키는 것이다. (x와y를 가르키는 것이 아니라…함수실행 프레임과 반대로) 그래서 변형도 가능하다.</p>\n<p>tmp는 임시장소, inout은 원래장소에 접근하는 것. 그래서 위 예시코드를 보면 lhs과 rhs의 값을 보다 편의하게 바꿀 수 있게 된다…!</p>\n<h1 id=\"generics의-쓰임..\">Generics의 쓰임…<a title=\"#generics의-쓰임..\" href=\"#generics의-쓰임..\"></a></h1>\n<p>inout까지 설명이 되었고, 본론으로 돌아와서. 그럼 Generics은 왜 써야하는 거야? 의문이 생긴다. 위에 서 말했듯, 제네릭을 쓰는 이유는 모든 자료형을 처리하기 위해 쓴다. 다시 예시코드를 보면,</p>\n<p><em>예시코드(예시2)</em></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapInteger</span><span class=\"params\">(lhs: <span class=\"keyword\">inout</span> Int, rhs: <span class=\"keyword\">inout</span> Int)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> tmp = lhs</span><br><span class=\"line\">   lhs = rhs</span><br><span class=\"line\">   rhs = tmp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>해당 코드를 실행하기 위해 inout으로 효과적으로 쓸 수 있지만, 만약 (Int가 아닌) 타입이 다를 경우… 아래와 같은 코드 중복이 발생한다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapInteger16</span><span class=\"params\">(lhs: <span class=\"keyword\">inout</span> Int16, rhs: <span class=\"keyword\">inout</span> Int16)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapInteger64</span><span class=\"params\">(lhs: <span class=\"keyword\">inout</span> Int64, rhs: <span class=\"keyword\">inout</span> Int64)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapDouble</span><span class=\"params\">(lhs: <span class=\"keyword\">inout</span> Double, rhs: <span class=\"keyword\">inout</span> Double)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이러한 방식은 코드 중복의 문제도 있지만, 값을 바꾸어야할 때, 함수에 포함된 코드를 하나하나 다 수정해야한다는 문제도 있다.</p>\n<p><strong>이 이유로 제내릭을 쓴다.</strong></p>\n<p><em>Generics 기본형</em></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">name</span>&lt;T&gt;<span class=\"params\">(parameters)</span></span> -&gt; <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>타입 파라미터는 함수 내부에서 파라미터 형식이나 리턴형으로 사용된다. (함수 바디에서 사용하는 것도 가능하다). 제네릭 선언시 보통은 T를 사용하지만 다른 이름을 사용하는 것도 문제가 없다. 다만, T로 쓰는 게 약속이기에 거의 T를 쓴다. 형식이름이기 때문에 UpperCamelcase로 대문자 한글자만 선언한다. 그리고 2개이상 선언하는 것도 가능하다.</p>\n<p>그래서 위의 예시코드를 제네릭을 이용하여 작성해보면 아래와 같은 코드처럼 쓸 수 있게 된다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapValue</span>&lt;T&gt;<span class=\"params\">(lhs: <span class=\"keyword\">inout</span> T, rhs: <span class=\"keyword\">inout</span> T)</span></span> &#123;   <span class=\"comment\">//컴파일러가 전달된 형식의 적합한 코드를 자동으로 생성</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> tmp = lhs</span><br><span class=\"line\">   lhs = rhs</span><br><span class=\"line\">   rhs = tmp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">swapValue(lhs: &amp;a, rhs: &amp;b)    <span class=\"comment\">// Int를 파라미터로 전달</span></span><br><span class=\"line\">a <span class=\"comment\">//2</span></span><br><span class=\"line\">b <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">c</span> = <span class=\"number\">1.2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">3.4</span></span><br><span class=\"line\"></span><br><span class=\"line\">swapValue(lhs: &amp;<span class=\"built_in\">c</span>, rhs: &amp;d)    <span class=\"comment\">// Double을 파라미터로 전달</span></span><br><span class=\"line\"><span class=\"built_in\">c</span> <span class=\"comment\">//3.4</span></span><br><span class=\"line\">d <span class=\"comment\">//1.2</span></span><br></pre></td></tr></table></figure>\n<p>위의 중복적으로 처리한 일반 함수와 비교해보면, 작성해야하는 코드의 양이 비약적으로 감소하는 모습을 볼 수 있다. 여기서 타입 파라미터는 실제 자료형으로 대체되는 플레이스 홀더(어떤 기호같은것) ===&gt; 새로운 형식이 생성되는 것은 아니고, 코드가 실행될 때 문맥에 따라서 실제 형식으로 대체되는 플레이스 홀더일 뿐이다.</p>\n<p>그리고 파라미터는 깔을 맞춰줘야한다. var d = 3.4을 var d = 3으로 바꾸면 Cannot convert value of type ‘Int’ to expected argument type 'Double’라고 오류난다.</p>\n<p>제네릭이 그저 어렵게만 느껴졌는데, 제네릭의 사전적의미는  <strong>일반적인</strong>이다. 일반적인??이라고 생각하니 좀 받아들이기 쉬워지는 것 같기도 하고… 어쨌든 제네릭 형식을 이해한 후 다시 위의 ** 2. Result타입으로 에러처리** 부분을 한번 더 참고하면 좋을 것 같다.</p>\n<p>제네릭에 대한 자세한 내용은 이후 더 다뤄볼 생각이다.</p>\n<p>아래링크(준비중)</p>\n","prev":{"title":"REST API - Codable","link":"2020/10/12/POST/REST-API-Codable"},"next":{"title":"[Swift]scrollToRow 최상단 이동","link":"2020/09/24/Swift-최상단-이동"},"plink":"https://Qussk.github.io/2020/10/10/POST/Swift-throwing-함수/","toc":[{"id":"error-handling이란?","title":"Error Handling이란?","index":"1","children":[{"id":"개념-?","title":"개념 ?","index":"1.1"},{"id":"에러-처리(handling-errors)","title":"에러 처리(Handling Errors)","index":"1.2"}]},{"id":"throwing함수","title":"throwing함수","index":"2","children":[{"id":"에러를-미리-정의한다.-(열거형)","title":"에러를 미리 정의한다. (열거형)","index":"2.1"},{"id":"throws-/-throw","title":"throws &#x2F; throw","index":"2.2"}]},{"id":"do-catch으로-에러처리","title":"do-catch으로 에러처리","index":"3","children":[{"id":"try(가장-일반적인)","title":"try(가장 일반적인)","index":"3.1"},{"id":"try?","title":"try?","index":"3.2"},{"id":"try-!","title":"try !","index":"3.3"}]},{"id":"result타입으로-에러처리","title":"Result타입으로 에러처리","index":"4","children":[{"id":"[result을-쓰는-이유-?]","title":"[Result을 쓰는 이유 ?]","index":"4.1"},{"id":"예시1","title":"예시1","index":"4.2"},{"id":"delayed-error-handling","title":"Delayed Error Handling","index":"4.3"},{"id":"[제네릭-이용하여-처리해보기]","title":"[제네릭 이용하여 처리해보기]","index":"4.4"}]},{"id":"1.-에러-정의(열거형)","title":"1. 에러 정의(열거형)","index":"5"},{"id":"2.-result-이용-함수-만들기.","title":"2. Result 이용 함수 만들기.","index":"6","children":[{"id":"예시","title":"예시","index":"6.1"}]},{"id":"generics-왜-써야할-까?","title":"Generics 왜 써야할 까?","index":"7","children":[{"id":"예시2","title":"예시2","index":"7.1"}]},{"id":"inout은-왜-쓸까-?-(코너-속의-코너)-그-전에-함수실행의-메모리-구조-먼저-이해해보자.","title":"inout은 왜 쓸까 ? (코너 속의 코너) 그 전에 함수실행의 메모리 구조 먼저 이해해보자.","index":"8","children":[{"id":"1.-함수실행시-메모리구조-이해하기","title":"1. 함수실행시 메모리구조 이해하기","index":"8.1"}]},{"id":"그래서-...-inout은-왜-쓸까-?","title":"그래서 … inout은 왜 쓸까 ?","index":"9","children":[{"id":"2.-inout이해하기","title":"2. inout이해하기","index":"9.1"}]}]}