{"title":"[swift]UIScrollView 만들기","date":"2020-07-20T16:12:35.000Z","date_formatted":{"ll":"Jul 20, 2020","L":"07/20/2020","MM-DD":"07-20"},"thumbnail":"image/scroll.png","link":"2020/07/20/swift-UIScrollView-만들기","tags":["Swift","UIScrollView"],"categories":["ios"],"updated":"2020-07-21T04:20:22.312Z","content":"<p>앱을 이용하면서 자주접하는 scrollview를 공부해보자.</p>\n<p>scrollview가 까다로운게, 부모뷰가 자식뷰의 크기를 따라가는 속성이라 자식뷰의 프레임과 통일성이 굉장히 중요해진다.</p>\n<p>이것을 frame으로 잡는 방법이 있고 autolay 아웃으로 잡는 방법이 있는데</p>\n<p>2가지 다 알아보는 걸로 ㅋㅋ</p>\n<h1 id=\"[frame-이용]\">[frame 이용]<a title=\"#[frame-이용]\" href=\"#[frame-이용]\"></a></h1>\n<h3 id=\"주의점\"><s>주의점</s><a title=\"#주의점\" href=\"#주의점\"></a></h3>\n<p><img src=\"/image/scroll1.png\" alt=\"\" class=\"φcx\"></p>\n<ul>\n<li>red -&gt; ScrollView</li>\n<li>whigt -&gt; ImageView</li>\n</ul>\n<p>보기에 잘나온 것 같지만, 부모뷰(ScrollView)가 자식뷰(imageView)보다 더 큰 경우라서, 위처럼 구현되면 자식뷰들이 부모뷰의 영역(redView)만큼 자유자재로 움직일 수 있게 된다.</p>\n<p>애초에 그게 구현목표였다면 상관 없겠지만…<br>\n스크롤뷰에서는 보통 고정되도록 구현하니까…</p>\n<p><img src=\"/image/scroll4.png\" alt=\"\" class=\"φcx\"></p>\n<p>이런식으로 풀화면 채워야한다.<br>\n그리고 총 3개의 그림을 크롤 하도록…</p>\n<h2 id=\"1.선언\">1.선언<a title=\"#1.선언\" href=\"#1.선언\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> scrollView = <span class=\"type\">UIScrollView</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> scrollFrame = <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">0</span>, height: <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> images = [<span class=\"string\">\"naver\"</span>,<span class=\"string\">\"instagram\"</span>,<span class=\"string\">\"naver\"</span>] <span class=\"comment\">//이미지이름</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2.frame잡기\">2.frame잡기<a title=\"#2.frame잡기\" href=\"#2.frame잡기\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollView.contentSize = <span class=\"type\">CGSize</span>(width: <span class=\"number\">375</span> * <span class=\"number\">3</span>, height: scrollView.frame.height)</span><br><span class=\"line\">   scrollView.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">   scrollView.isPagingEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">// scrollView.backgroundColor = .red</span></span><br><span class=\"line\">   view.addSubview(scrollView)</span><br></pre></td></tr></table></figure>\n<p>2-1.  <strong>scrollView.contentSize</strong>는 width가 275인 이미지가 3개 들어간다는 의미로 * 3을 해주었다. height는 scrollView에 맞춤.<br>\n2-1. <strong>isPagingEnabled</strong>는 스크롤 할때 페이지값으로 프레임이 정확하게 이동하는 것</p>\n<h2 id=\"3.-scrollview에-들어갈-이미지의-size지정.\">3. ScrollView에 들어갈 이미지의 size지정.<a title=\"#3.-scrollview에-들어갈-이미지의-size지정.\" href=\"#3.-scrollview에-들어갈-이미지의-size지정.\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MARK:-ScrollView</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setScrollView</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> images.<span class=\"built_in\">indices</span> &#123;</span><br><span class=\"line\">    scrollFrame.origin.x = view.frame.width * <span class=\"type\">CGFloat</span>(index)</span><br><span class=\"line\">    scrollFrame.size = scrollView.frame.size</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> descriptionImage = <span class=\"type\">UIImageView</span>()</span><br><span class=\"line\">    descriptionImage.image = <span class=\"type\">UIImage</span>(named: images[index])</span><br><span class=\"line\">    descriptionImage.frame = <span class=\"type\">CGRect</span>(x: scrollFrame.origin.x, y: <span class=\"number\">0</span>, width: <span class=\"number\">375</span>, height: <span class=\"number\">430</span>)</span><br><span class=\"line\">    scrollView.addSubview(descriptionImage)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3-1. <strong>images.indices</strong> 이미지를 순차적으로 넣는다.<br>\n3-2. image의 사이즈</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">descriptionImage.frame = <span class=\"type\">CGRect</span>(x: scrollFrame.origin.x, y: <span class=\"number\">0</span>, width: <span class=\"number\">375</span>, height: <span class=\"number\">430</span>)</span><br></pre></td></tr></table></figure>\n<p>그러면 이미지가 scrollView의 크기와 맞게 잘 돌아가는 화면을 확인 할 수 있다.</p>\n<p>스크롤 방향은 콜렉션뷰처럼 호라이즌, 버티컬로 지정해주는 게 아니라,<br>\nscrollview가 지정범위를 주고, 자식뷰의 크기에 따라서 스크롤 해주는 개념이다.<br>\n그래서 자식뷰가 width를 늘리면서 가는지, height를 늘리면서 가는지에 따라 결정된다.</p>\n<p>fram이 정확한 값을 부여하기 쉬워서 오토레이아웃보다는 안정성 면에서 좋은 것 같지만, 나는 오토레이아웃 쟁이이니까.</p>\n<p>그리고, 위/아래로 스크롤 되는 것이 오토레이아웃이 더 쉬울것 같아서 아래의 방법처럼 해보았다.</p>\n<p><s>(사실 삽질 엄청 많이함.)</s></p>\n<h1 id=\"[autolayout-이용]\">[autoLayout 이용]<a title=\"#[autolayout-이용]\" href=\"#[autolayout-이용]\"></a></h1>\n<p>구현해야할 사항은 아래와 같다.</p>\n<p><img src=\"image/scroll6.png\" alt=\"\" class=\"φcx\"></p>\n<p>컨텐츠 크기에 맞춰 아래로 스크롤 하기!</p>\n<p>(ImageView와 함께 설명!)</p>\n<h2 id=\"1.-선언\">1. 선언<a title=\"#1.-선언\" href=\"#1.-선언\"></a></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let scrollView &#x3D; UIScrollView()</span><br><span class=\"line\">let detailimageView &#x3D; UIImageView()</span><br></pre></td></tr></table></figure>\n<h2 id=\"2.-ui\">2. UI<a title=\"#2.-ui\" href=\"#2.-ui\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollView.backgroundColor = .white</span><br><span class=\"line\">view.addSubview(scrollView)</span><br><span class=\"line\"></span><br><span class=\"line\">detailimageView.clipsToBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">detailimageView.image = <span class=\"type\">UIImage</span>(named: <span class=\"string\">\"dc1\"</span>)</span><br><span class=\"line\">scrollView.addSubview(detailimageView)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3.-constrain\">3. Constrain<a title=\"#3.-constrain\" href=\"#3.-constrain\"></a></h2>\n<ul>\n<li>translatesAutoresizingMaskIntoConstraints</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[scrollView,detailimageView].forEach&#123;</span><br><span class=\"line\">    $<span class=\"number\">0</span>.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NSLayoutConstraint</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NSLayoutConstraint</span>.activate([</span><br><span class=\"line\"></span><br><span class=\"line\">scrollView.topAnchor.constraint(equalTo: view.topAnchor, constant: -<span class=\"number\">90</span>),</span><br><span class=\"line\">scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),</span><br><span class=\"line\">scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),</span><br><span class=\"line\">scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),</span><br><span class=\"line\"></span><br><span class=\"line\">detailimageView.topAnchor.constraint(equalTo: scrollView.topAnchor),</span><br><span class=\"line\">detailimageView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),</span><br><span class=\"line\">detailimageView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),</span><br><span class=\"line\">detailimageView.widthAnchor.constraint(equalToConstant: <span class=\"type\">UIScreen</span>.main.bounds.width),</span><br><span class=\"line\">detailimageView.heightAnchor.constraint(equalToConstant: <span class=\"number\">480</span>),</span><br></pre></td></tr></table></figure>\n<p>3-1. scrollView.topAnchor를 constant : -90으로 잡은 이유는 **    view.safeAreaLayoutGuide** 가 아니라 View의 범위로 하고 싶어 설정한거고, topAnchor를 (equalTo: view.topAnchor)로만 잡게 되면 top부분이 고정되어 스크롤이 안된당… 그래서 고정을 주면 안되기 때문에, 임의의 값인 -90으로만 살짝 잡은것…</p>\n<p>3-2. scrollView의 레이아웃의 기본값을 view에 맞춰줬다면, 이제 자식뷰인 detailimageView설정이 중요해진다. top은 scrollView를 따라가고, 사실 widthAnchor가 애매한 부분인데(기기마다 크기 다르니까…), **(UIScreen.main.bounds.width)**로 아예 view가 아닌 스크린 값으로 잡아버린다.<br>\n3-3. heightAnchor를 잡은이유는 이미지의 값이 고정값이고, 그 위로 Lable이 가득한 뷰를 이어나가야하기 때문…</p>\n<p>그러면 가장 중요한. 유동값인 bottomAnchor는 어떻게 잡아야할까?</p>\n<p>방법은 간단하다.</p>\n<p>구현 이미지를 보면, 스크롤 뷰 맨 마지막에 올 컨텐츠는 “브랜드 더보기 &gt;” 버튼이다.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  viewsButton.topAnchor.constraint(equalTo: comentLable3.bottomAnchor, constant: <span class=\"number\">40</span>),</span><br><span class=\"line\">  viewsButton.widthAnchor.constraint(equalToConstant: <span class=\"number\">150</span>),</span><br><span class=\"line\">  viewsButton.trailingAnchor.constraint(equalTo: detailView.trailingAnchor, constant: -<span class=\"number\">23</span>),</span><br><span class=\"line\">  viewsButton.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: -<span class=\"number\">20</span>),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<p>3-4. 이런식으로 스크롤 마지막에올 viewsButton의 레이아웃을 <strong>scrollView.bottomAnchor</strong>으로 잡으면 된다.<br>\n3-4. detailView는 UIView고 그림 상의 흰영역부분 !(브랜드 설명?)</p>\n<p><img src=\"/image/scroll5.png\" alt=\"\" class=\"φcx\"></p>\n<p>요 흰부분 !!!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detailView.topAnchor.constraint(equalTo: detailimageView.bottomAnchor, constant: -39),</span><br><span class=\"line\">     detailView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),</span><br><span class=\"line\">     detailView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),</span><br><span class=\"line\">     detailView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: 20),</span><br><span class=\"line\">     detailView.heightAnchor.constraint(equalToConstant: 830),</span><br></pre></td></tr></table></figure>\n<p>이해를 돕기위해 detailView의 코드 올린다.</p>\n<p>이해해보니 참 쉽다!!!</p>\n<h1 id=\"scrollview-지정-장소에서-멈추기\">ScrollView 지정 장소에서 멈추기<a title=\"#scrollview-지정-장소에서-멈추기\" href=\"#scrollview-지정-장소에서-멈추기\"></a></h1>\n<p>위의 방법처럼 스크롤 범위를 해당 뷰의 heightAnchor로 조절가능하지만,<br>\n화면을 끝까지 당기는 경우 빈 화면이 조금 끌어당겨진다.<br>\n이것이 싫고 그냥 딱 원하는 만큼만 스크롤이 되었으면 좋겠다! 싶으면 아래를 이용하자</p>\n<h2 id=\"1.self-선언\">1.self 선언<a title=\"#1.self-선언\" href=\"#1.self-선언\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrollView.delegate = <span class=\"keyword\">self</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2.-extension(uiscrollviewdelegate)\">2. extension(UIScrollViewDelegate)<a title=\"#2.-extension(uiscrollviewdelegate)\" href=\"#2.-extension(uiscrollviewdelegate)\"></a></h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">DetaileDescriotionViewController</span>: <span class=\"title\">UIScrollViewDelegate</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">scrollViewDidScroll</span><span class=\"params\">(<span class=\"number\">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> scrollView.contentOffset.y &gt; <span class=\"number\">450</span> &#123;</span><br><span class=\"line\">      scrollView.contentOffset.y = <span class=\"number\">450</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(scrollView.contentOffset.y)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2-1. scrollView.contentOffset.y &gt; 450  값이 450 이상이면,<br>\nscrollView.contentOffset.y = 450을 450으로 지정하겠다는 뜻이다.<br>\n2-2. <strong>print(scrollView.contentOffset.y)</strong> 는 스크롤 되었을 때, contentOffset의 y좌표를 알려준다. 그 값에 따라 적당한 값으로 설정 가능!!</p>\n","prev":{"title":"[Swift]PageView(with:ScrollView)","link":"2020/07/20/Swift-PageView-with-ScrollView"},"next":{"title":"[Swift]NavigationBar 생략","link":"2020/07/20/Swift-네이베이션-바-생략"},"plink":"https://Qussk.github.io/2020/07/20/swift-UIScrollView-만들기/","toc":[{"id":"[frame-이용]","title":"[frame 이용]","index":"1","children":[{"id":"주의점","title":"주의점","index":"1.1"}]},{"id":"1.선언","title":"1.선언","index":"2"},{"id":"2.frame잡기","title":"2.frame잡기","index":"3"},{"id":"3.-scrollview에-들어갈-이미지의-size지정.","title":"3. ScrollView에 들어갈 이미지의 size지정.","index":"4"}]}