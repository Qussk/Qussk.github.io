{"title":"[Swift]스토리보드에서 AutoLayout이해하기","date":"2020-05-15T20:22:12.000Z","date_formatted":{"ll":"May 15, 2020","L":"05/15/2020","MM-DD":"05-15"},"thumbnail":"/image/auto-1.png","link":"2020/05/15/Swift-스토리보드에서-AytoLayoutㅇ이해하기","tags":["AutoLayout","Swift","UIView"],"categories":["ios"],"updated":"2020-05-15T15:29:14.027Z","content":"<h2 id=\"laying-out-a-user-interface\">Laying out a user interface<a title=\"#laying-out-a-user-interface\" href=\"#laying-out-a-user-interface\"></a></h2>\n<p>애플에서 지원하는 레이아웃에 대한 접근 방식은 총 3가지가 있다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[유저 인터페이스 구성을 위한 3가지 주요 접근 방식]</span><br><span class=\"line\">Frame 기반의 프로그래밍 방식</span><br><span class=\"line\">Autoresizing masks</span><br><span class=\"line\">Auto Layout</span><br></pre></td></tr></table></figure>\n<p>첫번째 <strong>Frame 기반의 프로그래밍 방식</strong>은 코드를 이용한 방식이다.</p>\n<p>(Frame 기반의 프로그래밍 방식은 다음 포스트에서 할 계획이다.)</p>\n<p>두번째 <strong>Autoresizing masks</strong>은 기본적으로 제공되는 레이아웃이라고 생각하면 되는데(만약 내가 작성한 코드나 직접 Auto Layout을 사용하게될 경우에는 translatesAutoresizingMaskIntoConstraints 값을 false로 지정해야만 한다.) Autoresizing masks에 대한 자세한 이해가 필요하다면, 아래의 링크에서 확인하길 바란다.</p>\n<p><a href=\"https://www.thecodedself.com/autoresizing-masks/\" target=\"_blank\">https://www.thecodedself.com/autoresizing-masks/</a></p>\n<p>그리고 세번째인 <strong>Auto Layout</strong> 은 스토리보드 상에서 레이아웃을 잡는 방식이다.</p>\n<p>오늘은 스토리보드 상에서 레이아웃을 잡을 수 있는 기능인 오토레이아웃에 대해서 알아볼 것인데,</p>\n<p>들어가기 전에 가장 기본이 되는 Autoresizing의 구조를 한 번 훑고 지나가자.</p>\n<h2 id=\"autoresizing-기본구조\">Autoresizing 기본구조<a title=\"#autoresizing-기본구조\" href=\"#autoresizing-기본구조\"></a></h2>\n<p>스토리보드에서 UIView를 만들면 우측 사이즈 인스펙터 탭에 Autoresizing가 보이는 것을 시각적으로 확인할 수 있다.</p>\n<p><img src=\"/image/auto-3.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>대충 이런 느낌인데, 빨간색 선이 곧 View의 저 좌측 꼭지점 부분을 가리킨다고 보면 된다. (서로 매칭하면서 생각하면 쉽다.)</p>\n<p><img src=\"/image/auto-2.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>이런식으로… (그림과 함께 보면 더 쉽다…)</p>\n<p><img src=\"/image/auto-1.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>주의할 점은 꼭 필요한 부분만 빨간색 선이 나오도록 클릭해주는 것이다…(남발하면 작동안됨… 컴퓨터가 어디를 기준으로 줘야하는지 모르는 상태가 되어버리니까… 기준은 명확하게 !)</p>\n<p>그리고 만약</p>\n<p><img src=\"/image/auto-4.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>이런 식으로 오른쪽에 기준을 준 뒤,</p>\n<p><img src=\"image/auto-5.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>검정색 부분의 꼭지점을 잡고 왼쪽으로 드래그하면, 빨간색 부분인 오른쪽이 고정된 채로 노란 뷰가 줄어 듦을 알 수 있다.</p>\n<p>이와 같이 여러 방법으로 움직여보면 Autoresizing 어떤 방식으로 작동하는지 금방 알 수 있다.</p>\n<p>그리고 UIView의 인스팩터 탭에서는 Autoresizing뿐만아니라, 현재 뷰의 x축,y축,width(넓이),height(높이)에 대한 정보도 볼 수 있으니 참고하자!</p>\n<p>이제 Autoresizing에 대해 어느 정도 훑었으니, 본격적으로 Auto Layout 으로 들어가자.</p>\n<h2 id=\"auto-layout-이란?\">Auto Layout 이란?<a title=\"#auto-layout-이란?\" href=\"#auto-layout-이란?\"></a></h2>\n<p><strong>Auto Layout</strong> 은 뷰에 주어진 제약조건에 따라 뷰의 크기와 위치를 동적으로 계산해 배치하는 것으로, 외부 또는 내부의 변화에 동적으로 반응하여 유저 인터페이스를 구성한다.</p>\n<p>역시 말로 하면 잘모르겠으니 직접 보도록하자.</p>\n<h2 id=\"auto-layout-활용\">Auto Layout 활용<a title=\"#auto-layout-활용\" href=\"#auto-layout-활용\"></a></h2>\n<h3 id=\"auto-layout-tools\">Auto Layout tools<a title=\"#auto-layout-tools\" href=\"#auto-layout-tools\"></a></h3>\n<p><img src=\"/image/autoMain-1.png\" alt=\"\" class=\"φcx\"></p>\n<p>오토레이아웃에 접근하기 위한 tools이다.</p>\n<p>왼쪽부터,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Update Frames : 제약조건과 맞지 않는 뷰 위치 갱신.</span><br><span class=\"line\">Align : 정렬에 관한 제약사항 설정 </span><br><span class=\"line\">Pin : 간격, 크기, 비율 등에 대한 제약 조건 설정 </span><br><span class=\"line\">Resolve Autolayout Lssues : 오토레이아웃 관련 문제 해결 </span><br><span class=\"line\">Emned In : 컨테이너 뷰 &#x2F; 뷰컨트롤러 추가</span><br></pre></td></tr></table></figure>\n<p>일단 가장 많이 접하게 되는 것은 Pin부분이다. 일단 예제를 통해 익혀보자.</p>\n<h2 id=\"[auto-layout-잡기]\">[Auto Layout 잡기]<a title=\"#[auto-layout-잡기]\" href=\"#[auto-layout-잡기]\"></a></h2>\n<h3 id=\"값으로-직접-layout잡기\">값으로 직접 Layout잡기<a title=\"#값으로-직접-layout잡기\" href=\"#값으로-직접-layout잡기\"></a></h3>\n<p><img src=\"/image/auto-11.png\" alt=\"\" class=\"φcx\"></p>\n<p>1-1. UIView를 하나 만들고, Pin을 클릭후 레이아웃의 왼쪽과 위쪽 값을 지정한다. 예제로 20씩 주자.<br>\n(참고로 Auto Layout을 잡을 때는, <strong>Constrain to margins</strong>에 체크를 해제하도록한다. )</p>\n<p>그리고 ** Add 2 Constraints를 클릭하여 내용을 적용한다.</p>\n<p><s>??적용하게 되면 빨간줄이 뜰것이다… ??</s></p>\n<p>빨간줄은 일단 ‘레이아웃에 문제있음’ 정도로 이해하면 될 것 같다. 값이 비어있거나, 값이 맞지 않는 경우(해당 값이 보여진다.)에 빨간줄로 표현된다. 오토 레이아웃을 잡는 다는 것은, 이 것을 파란색 줄로 바꾸는 작업 이라고 생각하면 쉽다. (노란색 줄도 놉…)</p>\n<p>그래서 현재의 상태는 레이아웃이 비어있는 값이 존재하므로, 비어있는 값을 마저 채워 줘야한다! 아래를 보자.</p>\n<p>1-2. 오른쪽과 아래값 지정하기.</p>\n<p><img src=\"/image/auto-12.png\" alt=\"\" class=\"φcx\"></p>\n<p>1-1과 마찬가지로 오른쪽과 아래 값을 20씩주고 add를 적용하면, view의 레이아웃이 정상적으로 잡힌 것을 볼 수 있다. (모두 파란줄!!!)</p>\n<p>이 처럼 해당 view에 대한 값을 '완전하고도 명확하게, 지정해주어야 뷰가 어떤 상황에서든 움직이지않고, 안전한 인터페이스를 제공할 수 있게 된다.</p>\n<p>1-3. width와 height로 레이아웃 잡기.</p>\n<p>1-2처럼 모든 테두리에 값을 지정하는 방법도 있지만, 해당 view의 넓이와 높이의 값을 알고 있다면, width와 height로도 지정해 줄 수 있다.</p>\n<p><img src=\"/image/auto-14.png\" alt=\"\" class=\"φcx\"></p>\n<p>이런 식으로…  width은 300, height는 500을 줬다.</p>\n<p><img src=\"/image/auto-15.png\" alt=\"\" class=\"φcx\"></p>\n<p>적용된 모습.</p>\n<h3 id=\"add-missing-constraints으로-layout-잡기\">Add Missing Constraints으로 Layout 잡기<a title=\"#add-missing-constraints으로-layout-잡기\" href=\"#add-missing-constraints으로-layout-잡기\"></a></h3>\n<p>다른 방법도 한가지 있는데, 위처럼 레이아웃을 일일히 지정할 필요 없이 먼저 UI를 짠 후, 그 값에 맞춰 모두 레이아웃이 잡히는 기능을 한다.<br>\n예를 들면,</p>\n<p><img src=\"/image/aytoadd-1.png\" alt=\"\" class=\"φcx\"></p>\n<p>2-1. 뷰를 선택후 아래 세모 모양(Resolve Autolayout Lssues)을 선택 후 ‘Add Missing Constraints’ 클릭</p>\n<p>그러면? 모두 정상적인 파란줄의 레이아웃으로 잘 잡히게 된다.</p>\n<p>2-2. 재지정?(바꾸고 싶엉!)</p>\n<p><img src=\"/image/aytoadd-2.png\" alt=\"\" class=\"φcx\"></p>\n<p>만약 뷰를 움직이고, 움직인 뒤의 UI로 레이아웃을 재지정 하고 싶은 경우.  다시 뷰를 선택후 아래 세모 모양(Resolve Autolayout Lssues)을 선택하면 ‘Update Constranit Constants’ 를 확인 할 수 있다.</p>\n<p>현재 뷰가 이동한 자리로 레이아웃을 다시 업데이트 해준다는 뜻이다.</p>\n<p>클릭하면?</p>\n<p><img src=\"/image/aytoadd-3.png\" alt=\"\" class=\"φcx\"></p>\n<p>지울 필요없이 자동적으로 레이아웃이 재설정 되는 모습.</p>\n<p>하지만, 사실? 눈대중으로 하는 것이 그렇게 명확하진 않아서? 보통 일일히 지정하는 법을 선호한다.<br>\n(어디까지나 명확하고 정확한 UI를 위해)</p>\n<h3 id=\"align-tool-으로-잡기\">Align Tool 으로 잡기<a title=\"#align-tool-으로-잡기\" href=\"#align-tool-으로-잡기\"></a></h3>\n<p><img src=\"/image/autoMain-2.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>Align Tool 중,</p>\n<p>제일 자주 사용하는 것이 아래 2개 “Horizontally in Container”, &quot;Verically in Container&quot;인데, 이는 center값을 기준으로 둔 선의 중앙값으로 이를 배치하겠다는 뜻이 된다.  클릭해보면 손 쉽게, 중앙 값으로, 혹은 중앙값을 기준으로 변경되는 모습을 확인 할 수 있다.</p>\n<h2 id=\"[auto-layout-값-수정]\">[Auto Layout 값 수정]<a title=\"#[auto-layout-값-수정]\" href=\"#[auto-layout-값-수정]\"></a></h2>\n<p>아마 레이아웃을 처음 접해보았다면 뭔가 아주많이? 꼬였을 것이다.</p>\n<p><s>빨간줄 범벅</s></p>\n<p>특히, 값을 변경하고 싶은데 값이 적용은 안되고, 줄만 줄줄히 늘어나는 현상…</p>\n<p><img src=\"/image/auto-13.png\" alt=\"\" class=\"φcx\"></p>\n<p>1-1. Pin은 어디까지나 새로 만들어지는 레이아웃에 대해서 제공되는 것이니, 값을 수정하고 싶다면 따로 우측 인스펙터 부분에서 이를 변경 해야한다.</p>\n<p>1-2. 변경할 레이아웃을 선택하고 Edit를 클릭하여 값을 변경하면 뷰 컨트롤러에 적용되는 모습을 확인할 수 있다.</p>\n<p>그리고 아예 없애거나, 지우고 싶다면?</p>\n<h2 id=\"[auto-layout-취소,-지우기]\">[Auto Layout 취소, 지우기]<a title=\"#[auto-layout-취소,-지우기]\" href=\"#[auto-layout-취소,-지우기]\"></a></h2>\n<p><img src=\"/image/auto-16.png\" alt=\"\" class=\"φcx\"></p>\n<p>1-1.레이아웃 선을 선택해서 키보드의 지움 버튼(&lt;-)으로 지우거나, 우측 인스펙터 부분을 클릭 후 지움(&lt;-)해주면 지워진다.</p>\n<p><s>애플의 이런 심플함은 가끔 경이롭기까지 하다…</s></p>\n<p>1-2. 레이아웃을 모두 지우는 것도 지원한다.</p>\n<p><img src=\"/image/auto-17.png\" alt=\"\" class=\"φcx\"></p>\n<p>뷰를 선택후 아래 세모 모양(Resolve Autolayout Lssues)을 클릭하면, Clear Constraints를 확인 할 수 있다.<br>\n누르면? 뷰에 해당하는 모든 레이아웃이 지워진다.</p>\n<h2 id=\"[auto-layout-attributes]\">[Auto Layout Attributes]<a title=\"#[auto-layout-attributes]\" href=\"#[auto-layout-attributes]\"></a></h2>\n<p><img src=\"/image/autoMain-3.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>레이아웃을 짤때 속성을 기억해주면 좋다.</p>\n<p>레이아웃의 지도와 같은 것!</p>\n<h2 id=\"[anatomy-of-a-constraint]\">[Anatomy of a Constraint]<a title=\"#[anatomy-of-a-constraint]\" href=\"#[anatomy-of-a-constraint]\"></a></h2>\n<p><img src=\"/image/autoMain-4.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>이것도 구조를 이해하는 것이 좋다. (코드짤 때 도움)</p>\n<h2 id=\"[safe-area와-view의-차이]\">[Safe Area와 View의 차이]<a title=\"#[safe-area와-view의-차이]\" href=\"#[safe-area와-view의-차이]\"></a></h2>\n<p><img src=\"/image/auto-6.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>⬆︎ Sadfe Area는 파란색 영역에 해당한다. (기기에서의 시계, 베터리, 하위 영역을 제외한 직사각형 영역)</p>\n<p><img src=\"/image/auto-7.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>⬆︎ View의 영역 (기기의 모든 전체영역)</p>\n<p>기준을 어디에 두느냐에 따라 레이아웃의 값도 달라지니 꼭 참고하여야할 부분이다.</p>\n<p><img src=\"/image/auto-7.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>Pin에서도 지정할 수있도록 지원되어 있다.</p>\n<h2 id=\"[frame과-auto-layout]\">[Frame과 Auto Layout]<a title=\"#[frame과-auto-layout]\" href=\"#[frame과-auto-layout]\"></a></h2>\n<p><img src=\"/image/autoMain.png\" alt=\"이미지\" class=\"φcx\"></p>\n<p>이미지를 살펴보면 Auto Layout이 지원되는 방식을 알 수 있다.<br>\nFrame과 Auto Layout 모두 x,y축을 기본값으로 하지만, 왼쪽 이미지인 Frame은 좌표를 중점으로 두고 있다면, Auto Layout은 view사이의 상대적인 값에 중점을 두는 모습을 볼 수 있다.</p>\n<p>그래서, 레이아웃 값을 지정할때, 첫번째 뷰를 먼저 잡고, 이와 가장 근접해 있는 뷰&gt;근접 뷰&gt; 근접 뷰&gt; 근접 뷰&gt;…이런 방식으로 레이아웃을 잡아가는 게 좋다.</p>\n<p>다음 포스팅에는 오토레이아웃을 실전으로 잡는 포스트를 남기고,<br>\n왼쪽 이미지인 <strong>Frame</strong>에 대한 포스팅도 남길 것이다.<br>\n(기대기대)</p>\n<p>오토라고 하기엔 해줘야할게 너무 많지만,?</p>\n<p>그래도 편리하고 완벽해야할 Auto Layout 을 위해~!</p>\n","next":{"title":"[Swift]UserDefault로 데이터 저장하기","link":"2020/05/13/Swift-UserDefault로-데이터-저장하기"},"plink":"https://Qussk.github.io/2020/05/15/Swift-스토리보드에서-AytoLayoutㅇ이해하기/","toc":[{"id":"laying-out-a-user-interface","title":"Laying out a user interface","index":"1"},{"id":"autoresizing-기본구조","title":"Autoresizing 기본구조","index":"2"},{"id":"auto-layout-이란?","title":"Auto Layout 이란?","index":"3"},{"id":"auto-layout-활용","title":"Auto Layout 활용","index":"4","children":[{"id":"auto-layout-tools","title":"Auto Layout tools","index":"4.1"}]},{"id":"[auto-layout-잡기]","title":"[Auto Layout 잡기]","index":"5","children":[{"id":"값으로-직접-layout잡기","title":"값으로 직접 Layout잡기","index":"5.1"},{"id":"add-missing-constraints으로-layout-잡기","title":"Add Missing Constraints으로 Layout 잡기","index":"5.2"},{"id":"align-tool-으로-잡기","title":"Align Tool 으로 잡기","index":"5.3"}]},{"id":"[auto-layout-값-수정]","title":"[Auto Layout 값 수정]","index":"6"},{"id":"[auto-layout-취소,-지우기]","title":"[Auto Layout 취소, 지우기]","index":"7"},{"id":"[auto-layout-attributes]","title":"[Auto Layout Attributes]","index":"8"},{"id":"[anatomy-of-a-constraint]","title":"[Anatomy of a Constraint]","index":"9"},{"id":"[safe-area와-view의-차이]","title":"[Safe Area와 View의 차이]","index":"10"},{"id":"[frame과-auto-layout]","title":"[Frame과 Auto Layout]","index":"11"}]}